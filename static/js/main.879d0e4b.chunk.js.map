{"version":3,"sources":["components/commonComponents/InputComponent.js","components/addChart/AddChartComponent.js","components/chartsList/chart/ChartComponent.js","components/chartsList/chart/chart.service.js","components/chartsList/ChartsListComponent.js","App.js","index.js"],"names":["Input","id","value","saveAction","placeholder","useState","active","setActive","className","onClick","onBlur","e","target","type","onChange","stopPropagation","inputValue","htmlFor","AddChart","setCharts","aParam","setAParam","bParam","setBParam","nParam","setNParam","variation","setVariation","autoComplete","onSubmit","event","preventDefault","newChart","shortid","generate","a","b","length","charts","Chart","chartId","UArray","setUArray","YArray","setYArray","useEffect","temp_UArray","u_arr","i","push","generateUArray","idealA","idealB","min","max","input","y_arr","exactOutputValue","Math","floor","random","generateYArray","c3","bindto","size","width","data","xs","output","columns","style","height","ChartsList","map","chart","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.879d0e4b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Input = ({ id, value, saveAction, placeholder }) => {\n  const [active, setActive] = useState(false);\n\n  const handleChange = (e) => {\n    e.stopPropagation();\n    const inputValue = e.target.value;\n    saveAction(inputValue);\n  };\n\n  const handleBlur = (e) => (e.target.value === '' ? setActive(false) : null);\n\n  return (\n    <div className=\"field\" onClick={() => setActive(true)} onBlur={handleBlur}>\n      <input id={id} type=\"text\" value={value} onChange={handleChange} />\n      <label className={active ? 'active-label' : ''} htmlFor={id}>\n        {placeholder}\n      </label>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\n\nimport Input from '../commonComponents/InputComponent';\n\nconst AddChart = ({ setCharts }) => {\n  const [aParam, setAParam] = useState('');\n  const [bParam, setBParam] = useState('');\n  const [nParam, setNParam] = useState('');\n  const [variation, setVariation] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newChart = {\n      id: shortid.generate(),\n      a: +aParam,\n      b: +bParam,\n      length: +nParam,\n      variation: +variation,\n    };\n\n    setCharts((charts) => [...charts, newChart]);\n  };\n\n  return (\n    <form\n      autoComplete=\"off\"\n      className=\"add-chart-wrapper\"\n      onSubmit={handleSubmit}\n    >\n      <h4>Type parameters of ideal function</h4>\n      <div className=\"parameters-wrapper\">\n        <Input\n          id=\"a_param\"\n          value={aParam}\n          saveAction={setAParam}\n          placeholder=\"Parameter a\"\n        />\n        <Input\n          id=\"b_param\"\n          value={bParam}\n          saveAction={setBParam}\n          placeholder=\"Parameter b\"\n        />\n      </div>\n\n      <h4>Parameters of generated input and output arrays</h4>\n      <div className=\"parameters-wrapper\">\n        <Input\n          id=\"n_param\"\n          value={nParam}\n          saveAction={setNParam}\n          placeholder=\"Array length\"\n        />\n        <Input\n          id=\"variation\"\n          value={variation}\n          saveAction={setVariation}\n          placeholder=\"Variation\"\n        />\n      </div>\n      <button className=\"button\">Add chart</button>\n    </form>\n  );\n};\n\nexport default AddChart;\n","import React, { useState, useEffect } from 'react';\nimport c3 from 'c3';\n\nimport { generateUArray, generateYArray } from './chart.service';\n\nconst Chart = ({ id, a, b, length, variation }) => {\n  const chartId = id && `chart${id}`;\n  const [UArray, setUArray] = useState([]);\n  const [YArray, setYArray] = useState([]);\n\n  useEffect(() => {\n    const temp_UArray = generateUArray(length);\n    setUArray(temp_UArray);\n    setYArray(generateYArray(length, temp_UArray, variation, a, b));\n  }, [a, b, length, variation]);\n\n  useEffect(() => {\n    if (UArray.length && YArray.length) {\n      c3.generate({\n        bindto: `#${chartId}`,\n        size: {\n          width: 400,\n        },\n        data: {\n          xs: {\n            output: 'input',\n          },\n          columns: [\n            ['input', ...UArray],\n            ['output', ...YArray],\n          ],\n          type: 'scatter',\n        },\n      });\n    }\n  }, [chartId, UArray, YArray]);\n  return <div id={chartId} style={{ width: '100%', height: '100%' }}></div>;\n};\n\nexport default Chart;\n","function getRandomInRange(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction outputOfLinearFunction(input, a_param, b_param) {\n  return a_param * input + b_param;\n}\n\nfunction sumArray(arr) {\n  return arr.reduce((sum, val) => sum + val, 0);\n}\n\nexport function generateUArray(length) {\n  const u_arr = [];\n\n  for (let i = 0; i < length; i++) {\n    u_arr.push(i + 1);\n  }\n\n  return u_arr;\n}\n\nexport function generateYArray(length, UArray, variation, idealA, idealB) {\n  const y_arr = [];\n\n  for (let i = 0; i < length; i++) {\n    const exactOutputValue = outputOfLinearFunction(UArray[i], idealA, idealB);\n    y_arr.push(\n      getRandomInRange(\n        exactOutputValue - variation,\n        exactOutputValue + variation\n      )\n    );\n  }\n\n  return y_arr;\n}\n\nfunction getProductOfArrays(arr1, arr2) {\n  const newArr = [];\n  for (let i = 0; i < arr1.length; i++) {\n    newArr.push(arr1[i] * arr2[i]);\n  }\n  return newArr;\n}\n\nfunction getPow2ArrayValues(arr) {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(Math.pow(arr[i], 2));\n  }\n  return newArr;\n}\n\nexport function calculateAParam(U, Y) {\n  return (\n    (U.length * sumArray(getProductOfArrays(U, Y)) -\n      sumArray(U) * sumArray(Y)) /\n    (U.length * sumArray(getPow2ArrayValues(U)) - Math.pow(sumArray(U), 2))\n  );\n}\n\nexport function calculateBParam(U, Y, a_param) {\n  return (sumArray(Y) - a_param * sumArray(U)) / U.length;\n}\n","import React from 'react';\nimport './ChartsList.scss';\nimport Chart from './chart/ChartComponent';\n\nconst ChartsList = ({ charts }) => {\n  return (\n    <div className=\"charts-grid\">\n      {charts.map((chart) => (\n        <Chart key={chart.id} {...chart} />\n      ))}\n    </div>\n  );\n};\n\nexport default ChartsList;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport AddChart from './components/addChart/AddChartComponent';\nimport ChartsList from './components/chartsList/ChartsListComponent';\n\nfunction App() {\n  const [charts, setCharts] = useState([]);\n\n  return (\n    <main className=\"App\">\n      <header className=\"header\">\n        <h1>\n          Easy tool to analyse process of calculating parameters for linear\n          function\n        </h1>\n      </header>\n      <section className=\"tool-section\">\n        <div className=\"add-chart-section\">\n          <AddChart setCharts={setCharts} />\n        </div>\n        <div className=\"chart-section\">\n          <ChartsList charts={charts} />\n        </div>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}